# Set the system name, either Darwin, Linux, or Windows
SET(CMAKE_SYSTEM_NAME @cmake_system_name@)
SET(CMAKE_SYSTEM_PROCESSOR @arch@)
SET(CMAKE_BUILD_TYPE @release_type@)

OPTION(BUILD_TESTS "Build tests." OFF)

SET(STATIC ON)
SET(UNBOUND_STATIC ON)
SET(BUILD_TESTS @build_tests@)
SET(ARCH "default")

# where is the target environment
SET(CMAKE_FIND_ROOT_PATH @prefix@ /usr)

SET(ENV{PKG_CONFIG_PATH} @prefix@/lib/pkgconfig)

SET(Readline_ROOT_DIR @prefix@)
SET(Readline_INCLUDE_DIR @prefix@/include)
SET(Readline_LIBRARY @prefix@/lib/libreadline.a)
SET(Terminfo_LIBRARY @prefix@/lib/libtinfo.a)

SET(UNBOUND_INCLUDE_DIR @prefix@/include)
SET(UNBOUND_LIBRARIES @prefix@/lib/libunbound.a)

SET(LIBUSB-1.0_LIBRARY @prefix@/lib/libusb-1.0.a)
SET(LIBUDEV_LIBRARY @prefix@/lib/libudev.a)

SET(ZMQ_INCLUDE_DIRS @prefix@/include)
SET(ZMQ_LIBRARIES @prefix@/lib/libzmq.a)
SET(ZMQ_LIBRARY_DIRS @prefix@/lib)

SET(Boost_IGNORE_SYSTEM_PATH ON)
SET(Boost_ROOT @prefix@)
SET(Boost_INCLUDE_DIRS @prefix@/include)
SET(Boost_LIBRARY_DIRS @prefix@/lib)
SET(Boost_IGNORE_SYSTEM_PATHS_DEFAULT OFF)
SET(Boost_NO_SYSTEM_PATHS ON)
SET(Boost_USE_STATIC_LIBS ON)
SET(Boost_USE_STATIC_RUNTIME ON)

SET(OPENSSL_ROOT_DIR @prefix@)
SET(ARCHITECTURE @arch@)
SET(TARGET_OS @host_os@)

# for libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER) # Find programs on host
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY) # Find libs in target
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY) # Find includes in target
# set(CMAKE_C_VISIBILITY_PRESET hidden)

function(split_program input_string program arguments)
  string(FIND "${input_string}" " " space_index)

  if(space_index EQUAL -1)
    set(${program} "${input_string}" PARENT_SCOPE)
    set(${arguments} "" PARENT_SCOPE)
  else()
    string(SUBSTRING "${input_string}" 0 ${space_index} _program)
    math(EXPR args_index "${space_index} + 1")
    string(SUBSTRING "${input_string}" ${args_index} -1 _arguments)

    set(${program} "${_program}" PARENT_SCOPE)
    set(${arguments} "${_arguments}" PARENT_SCOPE)
  endif()
endfunction()

# specify the cross compiler to be used. Darwin uses clang provided by the SDK.
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  if(ARCHITECTURE STREQUAL "aarch64")
    SET(CLANG_TARGET "arm64-apple-darwin")
    SET(CONF_TRIPLE "armh64-apple-darwin")
    SET(BUILD_TAG "mac-arm64")
    SET(CMAKE_OSX_ARCHITECTURES "arm64")
    set(ARM ON)
    set(ARM_ID "armv8-a")
  else()
    SET(CLANG_TARGET "x86_64-apple-darwin")
    SET(CONF_TRIPLE "x86_64-apple-darwin")
    SET(BUILD_TAG "mac-x64")
    SET(CMAKE_OSX_ARCHITECTURES "x86_64")
  endif()
  SET(_CMAKE_TOOLCHAIN_PREFIX @prefix@/native/bin/${CONF_TRIPLE}-)
  split_program("@CC@" CC_DARWIN CC_DARWIN_ARGS)
  SET(CMAKE_C_COMPILER "${CC_DARWIN}" "${CC_DARWIN_ARGS}")
  SET(CMAKE_C_COMPILER_TARGET ${CLANG_TARGET})
  SET(CMAKE_C_FLAGS_INIT -B${_CMAKE_TOOLCHAIN_PREFIX})
  split_program("@CXX@" CXX_DARWIN CXX_DARWIN_ARGS)
  SET(CMAKE_CXX_COMPILER "${CXX_DARWIN}" "${CXX_DARWIN_ARGS}")
  SET(CMAKE_CXX_COMPILER_TARGET ${CLANG_TARGET})
  SET(CMAKE_CXX_FLAGS_INIT -B${_CMAKE_TOOLCHAIN_PREFIX})
  SET(CMAKE_ASM_COMPILER clang)
  SET(CMAKE_ASM-ATT_COMPILER as)
  SET(CMAKE_ASM_COMPILER_TARGET ${CLANG_TARGET})
  SET(CMAKE_ASM-ATT_COMPILER_TARGET ${CLANG_TARGET})
  SET(CMAKE_INSTALL_NAME_TOOL ${CLANG_TARGET}-install_name_tool)
  SET(CMAKE_OTOOL ${CLANG_TARGET}-otool)
  SET(APPLE True)
  SET(BUILD_64 ON)
  SET(BREW OFF)
  SET(PORT OFF)
  SET(CMAKE_OSX_SYSROOT "@prefix@/native/SDK/")
  SET(CMAKE_OSX_DEPLOYMENT_TARGET "10.15")
  SET(CMAKE_CXX_STANDARD 17)
  SET(LLVM_ENABLE_PIC OFF)
  SET(LLVM_ENABLE_PIE OFF)
elseif(TARGET_OS STREQUAL "android")
  SET(ANDROID TRUE)

  split_program("@CC@" CXX_ANDROID CC_ANDROID_ARGS)
  SET(CMAKE_C_COMPILER "${CC_ANDROID}" "${CC_ANDROID_ARGS}")

  split_program("@CXX@" CXX_ANDROID CXX_ANDROID_ARGS)
  SET(CMAKE_CXX_COMPILER "${CXX_ANDROID}" "${CXX_ANDROID_ARGS}")
else()
  SET(CMAKE_C_COMPILER @CC@)
  SET(CMAKE_CXX_COMPILER @CXX@)
endif()

if(ARCHITECTURE STREQUAL "arm")
  set(ARCH "armv7-a")
  set(ARM ON)
  set(ARM_ID "armv7-a")
  set(BUILD_64 OFF)
  set(CMAKE_BUILD_TYPE release)
  if(ANDROID)
    set(BUILD_TAG "android-armv7")
  else()
    set(BUILD_TAG "linux-armv7")
  endif()
  set(ARM7)
elseif(ARCHITECTURE STREQUAL "aarch64")
  set(ARCH "armv8-a")
  set(ARM ON)
  set(ARM_ID "armv8-a")
  if(ANDROID)
    set(BUILD_TAG "android-armv8")
  elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(BUILD_TAG "linux-armv8")
  endif()
  set(BUILD_64 ON)
endif()

if(ARCHITECTURE STREQUAL "x86_64")
  if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(BUILD_TAG "linux-x64")
  elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(BUILD_TAG "win-x64")
  endif()
  SET(ARCH_ID "x86_64")
endif()

#Create a new global cmake flag that indicates building with depends
set(DEPENDS true)
